{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\n/**\n * fake Todo data generator\n */\nconst initial = _Array$from({\n  length: 5\n}, (v, k) => k).map(k => {\n  const custom = {\n    id: `id-${k}`,\n    content: `Make a short list for invision`,\n    status: \"pending\" // \"done\" or \"pending\"\n\n  };\n  return custom;\n});\n\nexport const TodoContext = React.createContext({});\n\nconst TodoProvider = props => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState(initial);\n\n  const addTodo = value => {\n    const newTodo = {\n      id: `id-${_Date$now()}`,\n      content: `${value}`,\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos([...todos]); // have to use this way [...todos]\n  };\n\n  const updateTodo = todoItem => {\n    const index = todos.findIndex(todo => todo.id === todoItem.id);\n    todos[index] = todoItem;\n    setTodos([...todos]);\n  };\n\n  const removeTodo = todoId => {\n    const index = todos.findIndex(todo => todo.id === todoId);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n\n  return __jsx(TodoContext.Provider, {\n    value: {\n      todos,\n      setTodos,\n      addTodo,\n      updateTodo,\n      removeTodo\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TodoProvider;","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx"],"names":["React","useState","initial","length","v","k","map","custom","id","content","status","TodoContext","createContext","TodoProvider","props","todos","setTodos","addTodo","value","newTodo","push","updateTodo","todoItem","index","findIndex","todo","removeTodo","todoId","splice","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA4C,OAA5C;;AAWA;;;AAGA,MAAMC,OAAO,GAAG,YAAW;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAX,EAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAApC,EAAuCC,GAAvC,CAA2CD,CAAC,IAAI;AAC9D,QAAME,MAAgB,GAAG;AACvBC,IAAAA,EAAE,EAAG,MAAKH,CAAE,EADW;AAEvBI,IAAAA,OAAO,EAAG,gCAFa;AAGvBC,IAAAA,MAAM,EAAE,SAHe,CAGL;;AAHK,GAAzB;AAKA,SAAOH,MAAP;AACD,CAPe,CAAhB;;AASA,OAAO,MAAMI,WAAW,GAAGX,KAAK,CAACY,aAAN,CAAoB,EAApB,CAApB;;AAEP,MAAMC,YAAY,GAAIC,KAAD,IAAgB;AACnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAACC,OAAD,CAAlC;;AAEA,QAAMe,OAAO,GAAIC,KAAD,IAAmB;AACjC,UAAMC,OAAiB,GAAG;AACxBX,MAAAA,EAAE,EAAG,MAAK,WAAW,EADG;AAExBC,MAAAA,OAAO,EAAG,GAAES,KAAM,EAFM;AAGxBR,MAAAA,MAAM,EAAE;AAHgB,KAA1B;AAKAK,IAAAA,KAAK,CAACK,IAAN,CAAWD,OAAX;AACAH,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR,CAPiC,CAOX;AACvB,GARD;;AAUA,QAAMM,UAAU,GAAIC,QAAD,IAAwB;AACzC,UAAMC,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYc,QAAQ,CAACd,EAA7C,CAAd;AACAO,IAAAA,KAAK,CAACQ,KAAD,CAAL,GAAeD,QAAf;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GAJD;;AAMA,QAAMW,UAAU,GAAIC,MAAD,IAA6B;AAC9C,UAAMJ,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYmB,MAApC,CAAd;AACAZ,IAAAA,KAAK,CAACa,MAAN,CAAaL,KAAb,EAAoB,CAApB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GAJD;;AAKA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KADK;AAELC,MAAAA,QAFK;AAGLC,MAAAA,OAHK;AAILI,MAAAA,UAJK;AAKLK,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGZ,KAAK,CAACe,QATT,CADF;AAaD,CArCD;;AAuCA,eAAehB,YAAf","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport { TodoType } from \"./TodoType\";\n\ninterface ContextProps {\n  todos: TodoType[];\n  setTodos: any;\n  addTodo: Function;\n  updateTodo: Function;\n  removeTodo: Function;\n}\n\n/**\n * fake Todo data generator\n */\nconst initial = Array.from({ length: 5 }, (v, k) => k).map(k => {\n  const custom: TodoType = {\n    id: `id-${k}`,\n    content: `Make a short list for invision`,\n    status: \"pending\" // \"done\" or \"pending\"\n  };\n  return custom;\n});\n\nexport const TodoContext = React.createContext({} as ContextProps);\n\nconst TodoProvider = (props: any) => {\n  const [todos, setTodos] = useState(initial as TodoType[]);\n\n  const addTodo = (value: string) => {\n    const newTodo: TodoType = {\n      id: `id-${Date.now()}`,\n      content: `${value}`,\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos([...todos]); // have to use this way [...todos]\n  };\n\n  const updateTodo = (todoItem: TodoType) => {\n    const index = todos.findIndex(todo => todo.id === todoItem.id);\n    todos[index] = todoItem;\n    setTodos([...todos]);\n  };\n\n  const removeTodo = (todoId: string | number) => {\n    const index = todos.findIndex(todo => todo.id === todoId);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <TodoContext.Provider\n      value={{\n        todos,\n        setTodos,\n        addTodo,\n        updateTodo,\n        removeTodo\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoProvider;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db, getTimeStamp } from './initialize';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce((accumulator, collection) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport async function getNewDocRef(collectionName) {\n  return await db.collection(collectionName).doc();\n}\nexport async function addDocument(collectionName, documentData) {\n  console.log(getTimeStamp(), 'timestamp');\n  return await db.collection(collectionName).add(documentData).then(docRef => docRef.id);\n}\nexport async function deleteDocument(collectionName, id) {\n  return await db.collection(collectionName).doc(id).delete().then(() => id);\n}\nexport async function updateDocument(collectionName, documentData) {\n  return await db.collection(collectionName).doc(documentData.id).update(documentData).then(() => documentData.id);\n}\nexport async function setDocument(collectionName, documentData) {\n  console.log(documentData, 'documentData');\n  return await db.collection(collectionName).doc(documentData.id).set(documentData, {\n    merge: true\n  }).then(() => documentData.id);\n}\nexport async function getDocuments(collectionName) {\n  return await db.collection(collectionName).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({}, doc.data(), {\n    id: doc.id\n  })));\n}\nexport async function getDocumentsByQuery(collectionName, query) {\n  console.log(...query, collectionName, 'test');\n  return await db.collection(collectionName) // @ts-ignore\n  .where(...query).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())));\n}\nexport async function deleteDocuments(collectionName) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef.get().then(querySnapshot => querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id))));\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/firebase/service.ts"],"names":["db","getTimeStamp","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","console","log","add","then","docRef","deleteDocument","delete","updateDocument","update","setDocument","set","merge","getDocuments","get","querySnapshot","map","getDocumentsByQuery","query","where","deleteDocuments","collectionRef","batch","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"mappings":"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","sourcesContent":["import { db, getTimeStamp } from './initialize';\n\nexport function convertCollectionsSnapshotToMap(snapshots: any) {\n  return snapshots.docs.reduce((accumulator: any, collection: any) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\n\nexport async function getNewDocRef(collectionName: any) {\n  return await db.collection(collectionName).doc();\n}\n\nexport async function addDocument(collectionName: any, documentData: any) {\n  console.log(getTimeStamp(), 'timestamp');\n  return await db\n    .collection(collectionName)\n    .add(documentData)\n    .then(docRef => docRef.id);\n}\n\nexport async function deleteDocument(collectionName: any, id: string) {\n  return await db\n    .collection(collectionName)\n    .doc(id)\n    .delete()\n    .then(() => id);\n}\n\nexport async function updateDocument(collectionName: any, documentData: any) {\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .update(documentData)\n    .then(() => documentData.id);\n}\n\nexport async function setDocument(collectionName: any, documentData: any) {\n  console.log(documentData, 'documentData');\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .set(documentData, { merge: true })\n    .then(() => documentData.id);\n}\n\nexport async function getDocuments(collectionName: string) {\n  return await db\n    .collection(collectionName)\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }))\n    );\n}\nexport async function getDocumentsByQuery(collectionName: any, query: any) {\n  console.log(...query, collectionName, 'test');\n\n  return await db\n    .collection(collectionName)\n    // @ts-ignore\n    .where(...query)\n    .get()\n    .then((querySnapshot: any) =>\n      querySnapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }))\n    );\n}\n\nexport async function deleteDocuments(collectionName: any) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\n    );\n\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\n\nexport const addCollectionAndDocuments = async (\n  collectionKey: any,\n  objectsToAdd: any\n) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach((obj: any) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
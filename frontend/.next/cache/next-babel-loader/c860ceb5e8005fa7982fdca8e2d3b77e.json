{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/components/UiElements/NavLink/NavLink.tsx\";\nvar __jsx = React.createElement;\nimport React, { Children } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\nvar ActiveLink = function ActiveLink(_ref) {\n  var children = _ref.children,\n      activeClassName = _ref.activeClassName,\n      href = _ref.href,\n      props = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\", \"href\"]);\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname;\n\n  var child = Children.only(children);\n  var childClassName = child.props.className || '';\n  var newpathname = pathname.split('/').slice(1, 2);\n  var path = \"/\".concat(newpathname[0]);\n  var className = path === href ? \"\".concat(childClassName, \" \").concat(activeClassName).trim() : childClassName;\n  return __jsx(Link, _extends({\n    href: href\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.cloneElement(child, {\n    className: className || null\n  }));\n};\n\nexport default ActiveLink;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/components/UiElements/NavLink/NavLink.tsx"],"names":["React","Children","useRouter","Link","ActiveLink","children","activeClassName","href","props","pathname","child","only","childClassName","className","newpathname","split","slice","path","trim","cloneElement"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAKI;AAAA,MAJrBC,QAIqB,QAJrBA,QAIqB;AAAA,MAHrBC,eAGqB,QAHrBA,eAGqB;AAAA,MAFrBC,IAEqB,QAFrBA,IAEqB;AAAA,MADlBC,KACkB;;AAAA,mBACAN,SAAS,EADT;AAAA,MACbO,QADa,cACbA,QADa;;AAErB,MAAMC,KAAU,GAAGT,QAAQ,CAACU,IAAT,CAAcN,QAAd,CAAnB;AACA,MAAMO,cAAc,GAAGF,KAAK,CAACF,KAAN,CAAYK,SAAZ,IAAyB,EAAhD;AACA,MAAMC,WAAW,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAApB;AACA,MAAMC,IAAI,cAAOH,WAAW,CAAC,CAAD,CAAlB,CAAV;AAEA,MAAMD,SAAS,GACbI,IAAI,KAAKV,IAAT,GACI,UAAGK,cAAH,cAAqBN,eAArB,EAAuCY,IAAvC,EADJ,GAEIN,cAHN;AAKA,SACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEL;AAAZ,KAAsBC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGR,KAAK,CAACmB,YAAN,CAAmBT,KAAnB,EAA0B;AACzBG,IAAAA,SAAS,EAAEA,SAAS,IAAI;AADC,GAA1B,CADH,CADF;AAOD,CAxBD;;AA0BA,eAAeT,UAAf","sourcesContent":["import React, { Children } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\ntype ActiveLinkProps = {\n  children: React.ReactNode;\n  activeClassName: string;\n  href: string;\n};\n\nconst ActiveLink = ({\n  children,\n  activeClassName,\n  href,\n  ...props\n}: ActiveLinkProps) => {\n  const { pathname } = useRouter();\n  const child: any = Children.only(children);\n  const childClassName = child.props.className || '';\n  const newpathname = pathname.split('/').slice(1, 2);\n  const path = `/${newpathname[0]}`;\n\n  const className =\n    path === href\n      ? `${childClassName} ${activeClassName}`.trim()\n      : childClassName;\n\n  return (\n    <Link href={href} {...props}>\n      {React.cloneElement(child, {\n        className: className || null,\n      })}\n    </Link>\n  );\n};\n\nexport default ActiveLink;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/contexts/context.utils.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport function createCtx(reducer, initialState) {\n  var defaultDispatch = function defaultDispatch() {\n    return initialState;\n  }; // we never actually use this\n  // const ctx = React.createContext({\n  //   state: initialState,\n  //   dispatch: defaultDispatch, // just to mock out the dispatch type and make it not optional\n  // });\n\n\n  var stateCtx = React.createContext(initialState);\n  var dispatchCtx = React.createContext(defaultDispatch);\n\n  function useStateCtx(property) {\n    var state = React.useContext(stateCtx);\n\n    if (state === undefined) {\n      throw new Error('useCountState must be used within a CountProvider');\n    }\n\n    return state[property]; // only one depth selector for comparison\n  }\n\n  function useDispatchCtx() {\n    var context = React.useContext(dispatchCtx);\n\n    if (context === undefined) {\n      throw new Error('useCountDispatch must be used within a CountProvider');\n    }\n\n    return context;\n  }\n\n  function Provider(_ref) {\n    var children = _ref.children;\n\n    var _React$useReducer = React.useReducer(reducer, initialState),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n    return __jsx(dispatchCtx.Provider, {\n      value: dispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, __jsx(stateCtx.Provider, {\n      value: state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, children));\n  } // return [ctx, Provider] as const;\n\n\n  return [useStateCtx, useDispatchCtx, Provider];\n} // const [useTextState, useTextDispatch, TextProvider] = useCreateContext(initialState, reducer);\n// export const TextContext = ctx;\n// export function App() {\n//   return (\n//     <TextProvider>\n//       <Component />\n//     </TextProvider>\n//   )\n// }\n// export function Component() {\n//   const state = useTextState('state')\n//   const dispatch = useTextDispatch()\n// const increment = useCallback(() => dispatch({ type: 'increment' }), [dispatch]);\n//   return (\n//     <div>\n//       {state}\n//       <button onClick={increment}>Toggle</button>\n//     </div>\n//   )\n// }","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/contexts/context.utils.tsx"],"names":["React","createCtx","reducer","initialState","defaultDispatch","stateCtx","createContext","dispatchCtx","useStateCtx","property","state","useContext","undefined","Error","useDispatchCtx","context","Provider","children","useReducer","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,SAASC,SAAT,CACLC,OADK,EAELC,YAFK,EAGL;AACA,MAAMC,eAA2C,GAAG,SAA9CA,eAA8C;AAAA,WAAMD,YAAN;AAAA,GAApD,CADA,CACwE;AACxE;AACA;AACA;AACA;;;AACA,MAAME,QAAQ,GAAGL,KAAK,CAACM,aAAN,CAAoBH,YAApB,CAAjB;AACA,MAAMI,WAAW,GAAGP,KAAK,CAACM,aAAN,CAAoBF,eAApB,CAApB;;AACA,WAASI,WAAT,CAAgDC,QAAhD,EAA6D;AAC3D,QAAMC,KAAK,GAAGV,KAAK,CAACW,UAAN,CAAiBN,QAAjB,CAAd;;AACA,QAAIK,KAAK,KAAKE,SAAd,EAAyB;AACvB,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,WAAOH,KAAK,CAACD,QAAD,CAAZ,CAL2D,CAKnC;AACzB;;AAED,WAASK,cAAT,GAA0B;AACxB,QAAMC,OAAO,GAAGf,KAAK,CAACW,UAAN,CAAiBJ,WAAjB,CAAhB;;AACA,QAAIQ,OAAO,KAAKH,SAAhB,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,WAAOE,OAAP;AACD;;AAED,WAASC,QAAT,OAA6D;AAAA,QAAzCC,QAAyC,QAAzCA,QAAyC;;AAAA,4BACjCjB,KAAK,CAACkB,UAAN,CAExBhB,OAFwB,EAEfC,YAFe,CADiC;AAAA;AAAA,QACpDO,KADoD;AAAA,QAC7CS,QAD6C;;AAI3D,WACE,MAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEA,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,KAAK,EAAET,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCO,QAAlC,CADF,CADF;AAKD,GAjCD,CAkCA;;;AACA,SAAO,CAACT,WAAD,EAAcM,cAAd,EAA8BE,QAA9B,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nexport function createCtx<StateType, ActionType>(\n  reducer: React.Reducer<StateType, ActionType>,\n  initialState: StateType\n) {\n  const defaultDispatch: React.Dispatch<ActionType> = () => initialState; // we never actually use this\n  // const ctx = React.createContext({\n  //   state: initialState,\n  //   dispatch: defaultDispatch, // just to mock out the dispatch type and make it not optional\n  // });\n  const stateCtx = React.createContext(initialState);\n  const dispatchCtx = React.createContext(defaultDispatch);\n  function useStateCtx<K extends keyof StateType>(property: K) {\n    const state = React.useContext(stateCtx);\n    if (state === undefined) {\n      throw new Error('useCountState must be used within a CountProvider');\n    }\n    return state[property]; // only one depth selector for comparison\n  }\n\n  function useDispatchCtx() {\n    const context = React.useContext(dispatchCtx);\n    if (context === undefined) {\n      throw new Error('useCountDispatch must be used within a CountProvider');\n    }\n    return context;\n  }\n\n  function Provider({ children }: React.PropsWithChildren<{}>) {\n    const [state, dispatch] = React.useReducer<\n      React.Reducer<StateType, ActionType>\n    >(reducer, initialState);\n    return (\n      <dispatchCtx.Provider value={dispatch}>\n        <stateCtx.Provider value={state}>{children}</stateCtx.Provider>\n      </dispatchCtx.Provider>\n    );\n  }\n  // return [ctx, Provider] as const;\n  return [useStateCtx, useDispatchCtx, Provider] as const;\n}\n\n// const [useTextState, useTextDispatch, TextProvider] = useCreateContext(initialState, reducer);\n// export const TextContext = ctx;\n// export function App() {\n//   return (\n//     <TextProvider>\n//       <Component />\n//     </TextProvider>\n//   )\n// }\n// export function Component() {\n//   const state = useTextState('state')\n//   const dispatch = useTextDispatch()\n// const increment = useCallback(() => dispatch({ type: 'increment' }), [dispatch]);\n//   return (\n//     <div>\n//       {state}\n//       <button onClick={increment}>Toggle</button>\n//     </div>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}
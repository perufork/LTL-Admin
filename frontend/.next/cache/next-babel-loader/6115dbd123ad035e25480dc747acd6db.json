{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from './initialize';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce((accumulator, collection) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport async function getNewDocRef(collectionName) {\n  return await db.collection(collectionName).doc();\n}\nexport async function addDocument(collectionName, documentData) {\n  return await db.collection(collectionName).add(documentData).then(docRef => docRef.id);\n}\nexport async function setDocument(collectionName, docRef, documentData) {\n  return await db.collection(collectionName).doc(docRef).set(documentData);\n}\nexport async function getDocuments(collectionName) {\n  // const data<T>=[]\n  return await db.collection(collectionName).get().then(querySnapshot => {\n    // const data<T>=[]\n    querySnapshot.docs.map(doc => _objectSpread({\n      id: doc.id\n    }, doc.data()));\n  }); // return data\n}\nexport async function getDocumentsByQuery(collectionName, query) {\n  console.log(...query, collectionName, 'test');\n  return await db.collection(collectionName) // @ts-ignore\n  .where(...query).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())));\n}\nexport async function deleteDocuments(collectionName) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef.get().then(querySnapshot => querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id))));\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/firebase/service.ts"],"names":["db","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","add","then","docRef","setDocument","set","getDocuments","get","querySnapshot","map","getDocumentsByQuery","query","console","log","where","deleteDocuments","collectionRef","batch","delete","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"mappings":"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","sourcesContent":["import { db } from './initialize';\n\nexport function convertCollectionsSnapshotToMap(snapshots: any) {\n  return snapshots.docs.reduce((accumulator: any, collection: any) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\n\nexport async function getNewDocRef(collectionName: any) {\n  return await db.collection(collectionName).doc();\n}\n\nexport async function addDocument(collectionName: any, documentData: any) {\n  return await db\n    .collection(collectionName)\n    .add(documentData)\n    .then(docRef => docRef.id);\n}\n\nexport async function setDocument(\n  collectionName: any,\n  docRef: any,\n  documentData: any\n) {\n  return await db\n    .collection(collectionName)\n    .doc(docRef)\n    .set(documentData);\n}\n\nexport async function getDocuments(collectionName: string) {\n  // const data<T>=[]\n  return await db\n    .collection(collectionName)\n    .get()\n    .then((querySnapshot: any) => {\n      // const data<T>=[]\n      querySnapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }));\n    });\n  // return data\n}\nexport async function getDocumentsByQuery(collectionName: any, query: any) {\n  console.log(...query, collectionName, 'test');\n\n  return await db\n    .collection(collectionName)\n    // @ts-ignore\n    .where(...query)\n    .get()\n    .then((querySnapshot: any) =>\n      querySnapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }))\n    );\n}\n\nexport async function deleteDocuments(collectionName: any) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\n    );\n\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\n\nexport const addCollectionAndDocuments = async (\n  collectionKey: any,\n  objectsToAdd: any\n) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach((obj: any) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
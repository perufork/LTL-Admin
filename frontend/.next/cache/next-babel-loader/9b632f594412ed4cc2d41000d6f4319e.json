{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var addItemToCart = function addItemToCart(cartItems, cartItemToAdd) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToAdd.id;\n  });\n\n  if (existingCartItem) {\n    return cartItems.map(function (cartItem) {\n      return cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    });\n  } // return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n\n\n  return [].concat(_toConsumableArray(cartItems), [cartItemToAdd]);\n};\nexport var removeItemFromCart = function removeItemFromCart(cartItems, cartItemToRemove) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id;\n  });\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(function (cartItem) {\n      return cartItem.id !== cartItemToRemove.id;\n    });\n  }\n\n  return cartItems.map(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity - 1\n    }) : cartItem;\n  });\n};\nexport function calcCartItemsTotal(cartItems) {\n  return cartItems.reduce(function (prev, cur) {\n    return prev + cur.quantity * cur.price;\n  }, 0);\n} // addToCart = () => {\n//   let cart = localStorage.getItem('cart')\n//                 ? JSON.parse(localStorage.getItem('cart')) : {};\n//   let id = this.props.product.id.toString();\n//   cart[id] = (cart[id] ? cart[id]: 0);\n//   let qty = cart[id] + parseInt(this.state.quantity);\n//   if (this.props.product.available_quantity < qty) {\n//     cart[id] = this.props.product.available_quantity;\n//   } else {\n//     cart[id] = qty\n//   }\n//   localStorage.setItem('cart', JSON.stringify(cart));\n// }\n// componentDidMount() {\n//   let cart = localStorage.getItem('cart');\n//   if (!cart) return;\n//   getCartProducts(cart).then((products) => {\n//     let total = 0;\n//     for (var i = 0; i < products.length; i++) {\n//       total += products[i].price * products[i].qty;\n//     }\n//     this.setState({ products, total });\n//     });\n// }\n// removeFromCart = (product) => {\n//   let products = this.state.products.filter((item) => item.id !== product.id);\n//   let cart = JSON.parse(localStorage.getItem('cart'));\n//   delete cart[product.id.toString()];\n//   localStorage.setItem('cart', JSON.stringify(cart));\n//   let total = this.state.total - (product.qty * product.price)\n//   this.setState({products, total});\n// }\n// clearCart = () => {\n//   localStorage.removeItem('cart');\n//   this.setState({products: []});\n// }","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/contexts/cart/cart.utils.ts"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter","calcCartItemsTotal","reduce","prev","cur","price"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAiBC,aAAjB,EAAwC;AACnE,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACvB,UAACC,QAAD;AAAA,WAAmBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAAjD;AAAA,GADuB,CAAzB;;AAGA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAc,UAACF,QAAD;AAAA,aACnBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACSD,QADT;AACmBG,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADjD,WAEIH,QAHe;AAAA,KAAd,CAAP;AAKD,GAVkE,CAWnE;;;AACA,sCAAWJ,SAAX,IAAsBC,aAAtB;AACD,CAbM;AAcP,OAAO,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACR,SAAD,EAAiBS,gBAAjB,EAA2C;AAC3E,MAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACvB,UAACC,QAAD;AAAA,WAAmBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAApD;AAAA,GADuB,CAAzB;;AAGA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACnC,WAAOP,SAAS,CAACU,MAAV,CACL,UAACN,QAAD;AAAA,aAAmBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAApD;AAAA,KADK,CAAP;AAGD;;AACD,SAAOL,SAAS,CAACM,GAAV,CAAc,UAACF,QAAD;AAAA,WACnBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,qBACSD,QADT;AACmBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADjD,SAEIH,QAHe;AAAA,GAAd,CAAP;AAKD,CAdM;AAgBP,OAAO,SAASO,kBAAT,CAA4BX,SAA5B,EAA4C;AACjD,SAAOA,SAAS,CAACY,MAAV,CACL,UAACC,IAAD,EAAYC,GAAZ;AAAA,WAAyBD,IAAI,GAAGC,GAAG,CAACP,QAAJ,GAAeO,GAAG,CAACC,KAAnD;AAAA,GADK,EAEL,CAFK,CAAP;AAID,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export const addItemToCart = (cartItems: any, cartItemToAdd: any) => {\n  const existingCartItem = cartItems.find(\n    (cartItem: any) => cartItem.id === cartItemToAdd.id\n  );\n  if (existingCartItem) {\n    return cartItems.map((cartItem: any) =>\n      cartItem.id === cartItemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n  // return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n  return [...cartItems, cartItemToAdd];\n};\nexport const removeItemFromCart = (cartItems: any, cartItemToRemove: any) => {\n  const existingCartItem = cartItems.find(\n    (cartItem: any) => cartItem.id === cartItemToRemove.id\n  );\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(\n      (cartItem: any) => cartItem.id !== cartItemToRemove.id\n    );\n  }\n  return cartItems.map((cartItem: any) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nexport function calcCartItemsTotal(cartItems: any) {\n  return cartItems.reduce(\n    (prev: any, cur: any) => prev + cur.quantity * cur.price,\n    0\n  );\n}\n// addToCart = () => {\n//   let cart = localStorage.getItem('cart')\n//                 ? JSON.parse(localStorage.getItem('cart')) : {};\n//   let id = this.props.product.id.toString();\n//   cart[id] = (cart[id] ? cart[id]: 0);\n//   let qty = cart[id] + parseInt(this.state.quantity);\n//   if (this.props.product.available_quantity < qty) {\n//     cart[id] = this.props.product.available_quantity;\n//   } else {\n//     cart[id] = qty\n//   }\n//   localStorage.setItem('cart', JSON.stringify(cart));\n// }\n\n// componentDidMount() {\n//   let cart = localStorage.getItem('cart');\n//   if (!cart) return;\n//   getCartProducts(cart).then((products) => {\n//     let total = 0;\n//     for (var i = 0; i < products.length; i++) {\n//       total += products[i].price * products[i].qty;\n//     }\n//     this.setState({ products, total });\n//     });\n// }\n// removeFromCart = (product) => {\n//   let products = this.state.products.filter((item) => item.id !== product.id);\n//   let cart = JSON.parse(localStorage.getItem('cart'));\n//   delete cart[product.id.toString()];\n//   localStorage.setItem('cart', JSON.stringify(cart));\n//   let total = this.state.total - (product.qty * product.price)\n//   this.setState({products, total});\n// }\n// clearCart = () => {\n//   localStorage.removeItem('cart');\n//   this.setState({products: []});\n// }\n"]},"metadata":{},"sourceType":"module"}
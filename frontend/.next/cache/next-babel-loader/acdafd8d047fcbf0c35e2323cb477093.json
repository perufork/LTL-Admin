{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from './initialize';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce(function (accumulator, collection) {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport function getNewDocRef(collectionName) {\n  return _regeneratorRuntime.async(function getNewDocRef$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).doc());\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function addDocument(collectionName, documentData) {\n  return _regeneratorRuntime.async(function addDocument$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).add(documentData).then(function (docRef) {\n            return docRef.id;\n          }));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function deleteDocument(collectionName, id) {\n  return _regeneratorRuntime.async(function deleteDocument$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).doc(id)[\"delete\"]().then(function () {\n            return id;\n          }));\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\nexport function updateDocument(collectionName, documentData) {\n  return _regeneratorRuntime.async(function updateDocument$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).doc(documentData.id).update(documentData).then(function () {\n            return documentData.id;\n          }));\n\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  });\n}\nexport function setDocument(collectionName, documentData) {\n  return _regeneratorRuntime.async(function setDocument$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(documentData, 'documentData');\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).doc(documentData.id).set(documentData, {\n            merge: true\n          }).then(function () {\n            return documentData.id;\n          }));\n\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  });\n}\nexport function getDocuments(collectionName) {\n  return _regeneratorRuntime.async(function getDocuments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(collectionName).get().then(function (querySnapshot) {\n            return querySnapshot.docs.map(function (doc) {\n              return _objectSpread({\n                id: doc.id\n              }, doc.data());\n            });\n          }));\n\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  });\n}\nexport function getDocumentsByQuery(collectionName, query) {\n  var _console, _db$collection;\n\n  return _regeneratorRuntime.async(function getDocumentsByQuery$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          (_console = console).log.apply(_console, _toConsumableArray(query).concat([collectionName, 'test']));\n\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap((_db$collection = db.collection(collectionName) // @ts-ignore\n          ).where.apply(_db$collection, _toConsumableArray(query)).get().then(function (querySnapshot) {\n            return querySnapshot.docs.map(function (doc) {\n              return _objectSpread({\n                id: doc.id\n              }, doc.data());\n            });\n          }));\n\n        case 3:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 4:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  });\n}\nexport function deleteDocuments(collectionName) {\n  var collectionRef, batch;\n  return _regeneratorRuntime.async(function deleteDocuments$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          collectionRef = db.collection(collectionName);\n          batch = db.batch();\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(collectionRef.get().then(function (querySnapshot) {\n            return querySnapshot.docs.map(function (doc) {\n              return batch[\"delete\"](collectionRef.doc(doc.id));\n            });\n          }));\n\n        case 4:\n          _context8.next = 6;\n          return _regeneratorRuntime.awrap(batch.commit().then(function () {\n            console.log('Batch Deletion successfully committed!');\n          }));\n\n        case 6:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 7:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  });\n}\nexport var addCollectionAndDocuments = function addCollectionAndDocuments(collectionKey, objectsToAdd) {\n  var collectionRef, batch;\n  return _regeneratorRuntime.async(function addCollectionAndDocuments$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          collectionRef = db.collection(collectionKey);\n          batch = db.batch();\n          objectsToAdd.forEach(function (obj) {\n            var newDocRef = collectionRef.doc();\n            batch.set(newDocRef, obj);\n          });\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(batch.commit().then(function () {\n            console.log('Batch Addition successfully committed!');\n          }));\n\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/firebase/service.ts"],"names":["db","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","add","then","docRef","deleteDocument","updateDocument","update","setDocument","console","log","set","merge","getDocuments","get","querySnapshot","map","getDocumentsByQuery","query","where","deleteDocuments","collectionRef","batch","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"mappings":"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","sourcesContent":["import { db } from './initialize';\n\nexport function convertCollectionsSnapshotToMap(snapshots: any) {\n  return snapshots.docs.reduce((accumulator: any, collection: any) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\n\nexport async function getNewDocRef(collectionName: any) {\n  return await db.collection(collectionName).doc();\n}\n\nexport async function addDocument(collectionName: any, documentData: any) {\n  return await db\n    .collection(collectionName)\n    .add(documentData)\n    .then(docRef => docRef.id);\n}\n\nexport async function deleteDocument(collectionName: any, id: string) {\n  return await db\n    .collection(collectionName)\n    .doc(id)\n    .delete()\n    .then(() => id);\n}\n\nexport async function updateDocument(collectionName: any, documentData: any) {\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .update(documentData)\n    .then(() => documentData.id);\n}\n\nexport async function setDocument(collectionName: any, documentData: any) {\n  console.log(documentData, 'documentData');\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .set(documentData, { merge: true })\n    .then(() => documentData.id);\n}\n\nexport async function getDocuments(collectionName: string) {\n  return await db\n    .collection(collectionName)\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))\n    );\n}\nexport async function getDocumentsByQuery(collectionName: any, query: any) {\n  console.log(...query, collectionName, 'test');\n\n  return await db\n    .collection(collectionName)\n    // @ts-ignore\n    .where(...query)\n    .get()\n    .then((querySnapshot: any) =>\n      querySnapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }))\n    );\n}\n\nexport async function deleteDocuments(collectionName: any) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\n    );\n\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\n\nexport const addCollectionAndDocuments = async (\n  collectionKey: any,\n  objectsToAdd: any\n) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach((obj: any) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
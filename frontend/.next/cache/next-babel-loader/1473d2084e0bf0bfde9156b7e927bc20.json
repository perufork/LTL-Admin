{"ast":null,"code":"var _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\n/**\n * fake Todo data generator\n */\nconst initial = Array.from({\n  length: 5\n}, (v, k) => k).map(k => {\n  const custom = {\n    id: `id-${k}`,\n    content: `Make a short list for invision`,\n    status: \"pending\" // \"done\" or \"pending\"\n\n  };\n  return custom;\n});\nexport const TodoContext = React.createContext({});\n\nconst TodoProvider = props => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState(initial);\n\n  const addTodo = value => {\n    const newTodo = {\n      id: `id-${Date.now()}`,\n      content: `${value}`,\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos([...todos]); // have to use this way [...todos]\n  };\n\n  const updateTodo = todoItem => {\n    const index = todos.findIndex(todo => todo.id === todoItem.id);\n    todos[index] = todoItem;\n    setTodos([...todos]);\n  };\n\n  const removeTodo = todoId => {\n    const index = todos.findIndex(todo => todo.id === todoId);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n\n  return __jsx(TodoContext.Provider, {\n    value: {\n      todos,\n      setTodos,\n      addTodo,\n      updateTodo,\n      removeTodo\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TodoProvider;","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx"],"names":["React","useState","initial","Array","from","length","v","k","map","custom","id","content","status","TodoContext","createContext","TodoProvider","props","todos","setTodos","addTodo","value","newTodo","Date","now","push","updateTodo","todoItem","index","findIndex","todo","removeTodo","todoId","splice","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA4C,OAA5C;;AAWA;;;AAGA,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAX,EAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAApC,EAAuCC,GAAvC,CAA2CD,CAAC,IAAI;AAC9D,QAAME,MAAgB,GAAG;AACvBC,IAAAA,EAAE,EAAG,MAAKH,CAAE,EADW;AAEvBI,IAAAA,OAAO,EAAG,gCAFa;AAGvBC,IAAAA,MAAM,EAAE,SAHe,CAGL;;AAHK,GAAzB;AAKA,SAAOH,MAAP;AACD,CAPe,CAAhB;AASA,OAAO,MAAMI,WAAW,GAAGb,KAAK,CAACc,aAAN,CAAoB,EAApB,CAApB;;AAEP,MAAMC,YAAY,GAAIC,KAAD,IAAgB;AACnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAACC,OAAD,CAAlC;;AAEA,QAAMiB,OAAO,GAAIC,KAAD,IAAmB;AACjC,UAAMC,OAAiB,GAAG;AACxBX,MAAAA,EAAE,EAAG,MAAKY,IAAI,CAACC,GAAL,EAAW,EADG;AAExBZ,MAAAA,OAAO,EAAG,GAAES,KAAM,EAFM;AAGxBR,MAAAA,MAAM,EAAE;AAHgB,KAA1B;AAKAK,IAAAA,KAAK,CAACO,IAAN,CAAWH,OAAX;AACAH,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR,CAPiC,CAOX;AACvB,GARD;;AAUA,QAAMQ,UAAU,GAAIC,QAAD,IAAwB;AACzC,UAAMC,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYgB,QAAQ,CAAChB,EAA7C,CAAd;AACAO,IAAAA,KAAK,CAACU,KAAD,CAAL,GAAeD,QAAf;AACAR,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GAJD;;AAMA,QAAMa,UAAU,GAAIC,MAAD,IAA6B;AAC9C,UAAMJ,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYqB,MAApC,CAAd;AACAd,IAAAA,KAAK,CAACe,MAAN,CAAaL,KAAb,EAAoB,CAApB;AACAT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GAJD;;AAKA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KADK;AAELC,MAAAA,QAFK;AAGLC,MAAAA,OAHK;AAILM,MAAAA,UAJK;AAKLK,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGd,KAAK,CAACiB,QATT,CADF;AAaD,CArCD;;AAuCA,eAAelB,YAAf","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport { TodoType } from \"./TodoType\";\n\ninterface ContextProps {\n  todos: TodoType[];\n  setTodos: any;\n  addTodo: Function;\n  updateTodo: Function;\n  removeTodo: Function;\n}\n\n/**\n * fake Todo data generator\n */\nconst initial = Array.from({ length: 5 }, (v, k) => k).map(k => {\n  const custom: TodoType = {\n    id: `id-${k}`,\n    content: `Make a short list for invision`,\n    status: \"pending\" // \"done\" or \"pending\"\n  };\n  return custom;\n});\n\nexport const TodoContext = React.createContext({} as ContextProps);\n\nconst TodoProvider = (props: any) => {\n  const [todos, setTodos] = useState(initial as TodoType[]);\n\n  const addTodo = (value: string) => {\n    const newTodo: TodoType = {\n      id: `id-${Date.now()}`,\n      content: `${value}`,\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos([...todos]); // have to use this way [...todos]\n  };\n\n  const updateTodo = (todoItem: TodoType) => {\n    const index = todos.findIndex(todo => todo.id === todoItem.id);\n    todos[index] = todoItem;\n    setTodos([...todos]);\n  };\n\n  const removeTodo = (todoId: string | number) => {\n    const index = todos.findIndex(todo => todo.id === todoId);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <TodoContext.Provider\n      value={{\n        todos,\n        setTodos,\n        addTodo,\n        updateTodo,\n        removeTodo\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoProvider;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoItem.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState, Fragment } from 'react';\nimport { AiFillCloseSquare, AiOutlineEdit } from 'react-icons/ai';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { Checkbox } from 'baseui/checkbox';\nimport { Grab } from 'baseui/icon';\nimport { Block } from 'baseui/block';\nimport { TodoContext } from './TodoContext';\nimport { TodoItemWrapper, TodoItem, EditButton, RemoveButton } from './Todo.styled';\n/**\n * Update Todo Component\n */\n\nfunction UpdateTodo({\n  todoItem,\n  updateTodo,\n  setShowInput\n}) {\n  const [value, setValue] = React.useState(todoItem.content);\n\n  const updateTodoItem = () => {\n    const updatedTodo = _objectSpread({}, todoItem, {\n      content: value\n    });\n\n    updateTodo(updatedTodo);\n    setShowInput(false);\n  };\n\n  return __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Input, {\n    autoFocus: true,\n    value: value,\n    onChange: event => setValue(event.currentTarget.value),\n    placeholder: \"Enter Your Todo\",\n    overrides: {\n      Root: {\n        style: {\n          minHeight: '54px'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(Button, {\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250, {\n            minWidth: '80px',\n            minHeight: '54px',\n            '@media only screen and (min-width: 481px)': {\n              minWidth: '130px'\n            }\n          });\n        }\n      }\n    },\n    onClick: () => updateTodoItem(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Update\"));\n}\n\nfunction Todo({\n  todo,\n  index\n}) {\n  const {\n    updateTodo,\n    removeTodo\n  } = useContext(TodoContext);\n  const {\n    0: showInput,\n    1: setShowInput\n  } = useState(false);\n  const checked = todo.status === 'done' ? true : false;\n\n  const updateTodoStatus = status => {\n    const todoStatus = _objectSpread({}, todo, {\n      status: status === true ? 'done' : 'pending'\n    });\n\n    updateTodo(todoStatus);\n  };\n\n  return __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, !showInput ? __jsx(Draggable, {\n    draggableId: todo.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, provided => __jsx(TodoItem, _extends({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(TodoItemWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(Grab, {\n    size: 24,\n    color: \"#545454\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(Checkbox, {\n    checked: checked,\n    onChange: () => updateTodoStatus(!checked),\n    overrides: {\n      Root: {\n        style: {\n          paddingLeft: '10px',\n          paddingRight: '10px',\n          '@media only screen and (max-width: 480px)': {\n            alignItems: 'center'\n          }\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, todo.content)), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(EditButton, {\n    onClick: e => {\n      e.preventDefault();\n      setShowInput(!showInput);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(AiOutlineEdit, {\n    size: '24px',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), __jsx(RemoveButton, {\n    onClick: e => {\n      e.preventDefault();\n      removeTodo(todo.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(AiFillCloseSquare, {\n    size: '24px',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })))))) : __jsx(UpdateTodo, {\n    todoItem: todo,\n    updateTodo: updateTodo,\n    setShowInput: setShowInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }));\n}\n\nexport default Todo;","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoItem.tsx"],"names":["React","useContext","useState","Fragment","AiFillCloseSquare","AiOutlineEdit","Draggable","Input","Button","Checkbox","Grab","Block","TodoContext","TodoItemWrapper","TodoItem","EditButton","RemoveButton","UpdateTodo","todoItem","updateTodo","setShowInput","value","setValue","content","updateTodoItem","updatedTodo","style","display","alignItems","event","currentTarget","Root","minHeight","BaseButton","$theme","typography","font250","minWidth","Todo","todo","index","removeTodo","showInput","checked","status","updateTodoStatus","todoStatus","id","provided","innerRef","draggableProps","dragHandleProps","paddingLeft","paddingRight","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useContext, useState, Fragment } from 'react';\nimport { AiFillCloseSquare, AiOutlineEdit } from 'react-icons/ai';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { Checkbox } from 'baseui/checkbox';\nimport { Grab } from 'baseui/icon';\nimport { Block } from 'baseui/block';\nimport { TodoType } from './TodoType';\nimport { TodoContext } from './TodoContext';\nimport {\n  TodoItemWrapper,\n  TodoItem,\n  EditButton,\n  RemoveButton,\n} from './Todo.styled';\n\n/**\n * Update Todo Component\n */\nfunction UpdateTodo({\n  todoItem,\n  updateTodo,\n  setShowInput,\n}: {\n  todoItem: TodoType;\n  updateTodo: Function;\n  setShowInput: any;\n}) {\n  const [value, setValue] = React.useState(todoItem.content);\n  const updateTodoItem = () => {\n    const updatedTodo = {\n      ...todoItem,\n      content: value,\n    };\n    updateTodo(updatedTodo);\n    setShowInput(false);\n  };\n  return (\n    <Block\n      overrides={{\n        Block: { style: { display: 'flex', alignItems: 'center' } },\n      }}\n    >\n      <Input\n        autoFocus={true}\n        value={value}\n        onChange={event => setValue(event.currentTarget.value)}\n        placeholder=\"Enter Your Todo\"\n        overrides={{ Root: { style: { minHeight: '54px' } } }}\n      />\n      <Button\n        overrides={{\n          BaseButton: {\n            style: ({ $theme }) => {\n              return {\n                ...$theme.typography.font250,\n                minWidth: '80px',\n                minHeight: '54px',\n                '@media only screen and (min-width: 481px)': {\n                  minWidth: '130px',\n                },\n              };\n            },\n          },\n        }}\n        onClick={() => updateTodoItem()}\n      >\n        Update\n      </Button>\n    </Block>\n  );\n}\n\nfunction Todo({ todo, index }: { todo: TodoType; index: number }) {\n  const { updateTodo, removeTodo } = useContext(TodoContext);\n  const [showInput, setShowInput] = useState(false);\n  const checked = todo.status === 'done' ? true : false;\n  const updateTodoStatus = (status: boolean) => {\n    const todoStatus = {\n      ...todo,\n      status: status === true ? 'done' : 'pending',\n    };\n    updateTodo(todoStatus);\n  };\n  return (\n    <Fragment>\n      {!showInput ? (\n        <Draggable draggableId={todo.id} index={index}>\n          {provided => (\n            <TodoItem\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n            >\n              <TodoItemWrapper>\n                <Block\n                  overrides={{\n                    Block: { style: { display: 'flex', alignItems: 'center' } },\n                  }}\n                >\n                  <Grab size={24} color=\"#545454\" />\n                  <Checkbox\n                    checked={checked}\n                    onChange={() => updateTodoStatus(!checked)}\n                    overrides={{\n                      Root: {\n                        style: {\n                          paddingLeft: '10px',\n                          paddingRight: '10px',\n                          '@media only screen and (max-width: 480px)': {\n                            alignItems: 'center',\n                          },\n                        },\n                      },\n                    }}\n                  >\n                    {todo.content}\n                  </Checkbox>\n                </Block>\n                <Block\n                  overrides={{\n                    Block: { style: { display: 'flex', alignItems: 'center' } },\n                  }}\n                >\n                  <EditButton\n                    onClick={e => {\n                      e.preventDefault();\n                      setShowInput(!showInput);\n                    }}\n                  >\n                    <AiOutlineEdit size={'24px'} />\n                  </EditButton>\n                  <RemoveButton\n                    onClick={e => {\n                      e.preventDefault();\n                      removeTodo(todo.id);\n                    }}\n                  >\n                    <AiFillCloseSquare size={'24px'} />\n                  </RemoveButton>\n                </Block>\n              </TodoItemWrapper>\n            </TodoItem>\n          )}\n        </Draggable>\n      ) : (\n        <UpdateTodo\n          todoItem={todo}\n          updateTodo={updateTodo}\n          setShowInput={setShowInput}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}
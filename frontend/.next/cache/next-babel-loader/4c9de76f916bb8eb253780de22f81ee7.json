{"ast":null,"code":"var _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { BaseProvider, LightTheme, DarkTheme } from 'baseui';\nimport { styletron, debug } from '../styletron';\nimport Layout from '../components/Layout/Layout';\nimport { ThemeSwitcherProvider, THEME } from '../contexts/theme/theme.provider';\nimport { CartProvider } from '../contexts/cart/cart.provider'; // external css\n\nimport '@glidejs/glide/dist/css/glide.core.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport '../assets/css/reset.css';\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  const [theme, setTheme] = React.useState(THEME.light);\n  return __jsx(ThemeSwitcherProvider, {\n    value: {\n      theme,\n      setTheme\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(StyletronProvider, {\n    value: styletron,\n    debug: debug,\n    debugAfterHydration: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(BaseProvider, {\n    theme: theme === THEME.light ? _objectSpread({}, LightTheme, {\n      direction: 'ltr'\n    }) : _objectSpread({}, DarkTheme, {\n      direction: 'ltr'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"INST.\"), __jsx(\"meta\", {\n    name: \"theme-color\",\n    content: \"#000000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst is a GraphQL based server side dashboard template\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800&display=swap\",\n    rel: \"stylesheet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), __jsx(CartProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))))))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/pages/_app.tsx"],"names":["React","Head","Provider","StyletronProvider","BaseProvider","LightTheme","DarkTheme","styletron","debug","Layout","ThemeSwitcherProvider","THEME","CartProvider","App","Component","pageProps","theme","setTheme","useState","light","direction"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAQ,IAAIC,iBAArB,QAA8C,iBAA9C;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,SAAnC,QAAoD,QAApD;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,cAAjC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,qBAAT,EAAgCC,KAAhC,QAA6C,kCAA7C;AACA,SAASC,YAAT,QAA6B,gCAA7B,C,CACA;;AACA,OAAO,4CAAP;AACA,OAAO,uCAAP;AACA,OAAO,mDAAP;AACA,OAAO,yBAAP;;AAEA,MAAMC,GAGJ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,KAAK,CAACkB,QAAN,CAAeP,KAAK,CAACQ,KAArB,CAA1B;AAEA,SACE,MAAC,qBAAD;AAAuB,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEV,SAA1B;AAAqC,IAAA,KAAK,EAAEC,KAA5C;AAAmD,IAAA,mBAAmB,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,KAAK,EACHQ,KAAK,KAAKL,KAAK,CAACQ,KAAhB,qBACSd,UADT;AACqBe,MAAAA,SAAS,EAAE;AADhC,2BAESd,SAFT;AAEoBc,MAAAA,SAAS,EAAE;AAF/B,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,OAAO,EAAC,wDAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAOE;AACE,IAAA,IAAI,EAAC,gFADP;AAEE,IAAA,GAAG,EAAC,YAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAcE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeL,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CAdF,CAPF,CADF,CADF,CADF;AAmCD,CAzCD;;AA2CA,eAAeF,GAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport Head from 'next/head';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { BaseProvider, LightTheme, DarkTheme } from 'baseui';\nimport { styletron, debug } from '../styletron';\nimport Layout from '../components/Layout/Layout';\nimport { ThemeSwitcherProvider, THEME } from '../contexts/theme/theme.provider';\nimport { CartProvider } from '../contexts/cart/cart.provider';\n// external css\nimport '@glidejs/glide/dist/css/glide.core.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport '../assets/css/reset.css';\n\nconst App: NextPage<{\n  Component: any;\n  pageProps: any;\n}> = ({ Component, pageProps }) => {\n  const [theme, setTheme] = React.useState(THEME.light);\n\n  return (\n    <ThemeSwitcherProvider value={{ theme, setTheme }}>\n      <StyletronProvider value={styletron} debug={debug} debugAfterHydration>\n        <BaseProvider\n          theme={\n            theme === THEME.light\n              ? { ...LightTheme, direction: 'ltr' }\n              : { ...DarkTheme, direction: 'ltr' }\n          }\n        >\n          <>\n            <Head>\n              <title>INST.</title>\n              <meta name=\"theme-color\" content=\"#000000\" />\n              <meta\n                name=\"Description\"\n                content=\"Inst is a GraphQL based server side dashboard template\"\n              />\n              <link\n                href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800&display=swap\"\n                rel=\"stylesheet\"\n              />\n            </Head>\n            {/* end of app head */}\n            <CartProvider>\n              <Layout>\n                <Component {...pageProps} />\n              </Layout>\n            </CartProvider>\n            {/* end of app layout */}\n          </>\n        </BaseProvider>\n      </StyletronProvider>\n    </ThemeSwitcherProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
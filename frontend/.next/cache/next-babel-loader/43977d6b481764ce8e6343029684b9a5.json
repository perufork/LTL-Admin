{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\n/**\n * fake Todo data generator\n */\nvar initial = _Array$from({\n  length: 5\n}, function (v, k) {\n  return k;\n}).map(function (k) {\n  var custom = {\n    id: \"id-\".concat(k),\n    content: \"Make a short list for invision\",\n    status: \"pending\" // \"done\" or \"pending\"\n\n  };\n  return custom;\n});\n\nexport var TodoContext = React.createContext({});\n\nvar TodoProvider = function TodoProvider(props) {\n  var _useState = useState(initial),\n      todos = _useState[0],\n      setTodos = _useState[1];\n\n  var addTodo = function addTodo(value) {\n    var newTodo = {\n      id: \"id-\".concat(_Date$now()),\n      content: \"\".concat(value),\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos(_toConsumableArray(todos)); // have to use this way [...todos]\n  };\n\n  var updateTodo = function updateTodo(todoItem) {\n    var index = todos.findIndex(function (todo) {\n      return todo.id === todoItem.id;\n    });\n    todos[index] = todoItem;\n    setTodos(_toConsumableArray(todos));\n  };\n\n  var removeTodo = function removeTodo(todoId) {\n    var index = todos.findIndex(function (todo) {\n      return todo.id === todoId;\n    });\n    todos.splice(index, 1);\n    setTodos(_toConsumableArray(todos));\n  };\n\n  return __jsx(TodoContext.Provider, {\n    value: {\n      todos: todos,\n      setTodos: setTodos,\n      addTodo: addTodo,\n      updateTodo: updateTodo,\n      removeTodo: removeTodo\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default TodoProvider;","map":{"version":3,"sources":["/Users/merin/dashboard-apps/inst/frontend/containers/Todo/TodoContext.tsx"],"names":["React","useState","initial","length","v","k","map","custom","id","content","status","TodoContext","createContext","TodoProvider","props","todos","setTodos","addTodo","value","newTodo","push","updateTodo","todoItem","index","findIndex","todo","removeTodo","todoId","splice","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA4C,OAA5C;;AAWA;;;AAGA,IAAMC,OAAO,GAAG,YAAW;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAX,EAA0B,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUA,CAAV;AAAA,CAA1B,EAAuCC,GAAvC,CAA2C,UAAAD,CAAC,EAAI;AAC9D,MAAME,MAAgB,GAAG;AACvBC,IAAAA,EAAE,eAAQH,CAAR,CADqB;AAEvBI,IAAAA,OAAO,kCAFgB;AAGvBC,IAAAA,MAAM,EAAE,SAHe,CAGL;;AAHK,GAAzB;AAKA,SAAOH,MAAP;AACD,CAPe,CAAhB;;AASA,OAAO,IAAMI,WAAW,GAAGX,KAAK,CAACY,aAAN,CAAoB,EAApB,CAApB;;AAEP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAgB;AAAA,kBACTb,QAAQ,CAACC,OAAD,CADC;AAAA,MAC5Ba,KAD4B;AAAA,MACrBC,QADqB;;AAGnC,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAmB;AACjC,QAAMC,OAAiB,GAAG;AACxBX,MAAAA,EAAE,eAAQ,WAAR,CADsB;AAExBC,MAAAA,OAAO,YAAKS,KAAL,CAFiB;AAGxBR,MAAAA,MAAM,EAAE;AAHgB,KAA1B;AAKAK,IAAAA,KAAK,CAACK,IAAN,CAAWD,OAAX;AACAH,IAAAA,QAAQ,oBAAKD,KAAL,EAAR,CAPiC,CAOX;AACvB,GARD;;AAUA,MAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAwB;AACzC,QAAMC,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACjB,EAAL,KAAYc,QAAQ,CAACd,EAAzB;AAAA,KAApB,CAAd;AACAO,IAAAA,KAAK,CAACQ,KAAD,CAAL,GAAeD,QAAf;AACAN,IAAAA,QAAQ,oBAAKD,KAAL,EAAR;AACD,GAJD;;AAMA,MAAMW,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAA6B;AAC9C,QAAMJ,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACjB,EAAL,KAAYmB,MAAhB;AAAA,KAApB,CAAd;AACAZ,IAAAA,KAAK,CAACa,MAAN,CAAaL,KAAb,EAAoB,CAApB;AACAP,IAAAA,QAAQ,oBAAKD,KAAL,EAAR;AACD,GAJD;;AAKA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KAAK,EAALA,KADK;AAELC,MAAAA,QAAQ,EAARA,QAFK;AAGLC,MAAAA,OAAO,EAAPA,OAHK;AAILI,MAAAA,UAAU,EAAVA,UAJK;AAKLK,MAAAA,UAAU,EAAVA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGZ,KAAK,CAACe,QATT,CADF;AAaD,CArCD;;AAuCA,eAAehB,YAAf","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport { TodoType } from \"./TodoType\";\n\ninterface ContextProps {\n  todos: TodoType[];\n  setTodos: any;\n  addTodo: Function;\n  updateTodo: Function;\n  removeTodo: Function;\n}\n\n/**\n * fake Todo data generator\n */\nconst initial = Array.from({ length: 5 }, (v, k) => k).map(k => {\n  const custom: TodoType = {\n    id: `id-${k}`,\n    content: `Make a short list for invision`,\n    status: \"pending\" // \"done\" or \"pending\"\n  };\n  return custom;\n});\n\nexport const TodoContext = React.createContext({} as ContextProps);\n\nconst TodoProvider = (props: any) => {\n  const [todos, setTodos] = useState(initial as TodoType[]);\n\n  const addTodo = (value: string) => {\n    const newTodo: TodoType = {\n      id: `id-${Date.now()}`,\n      content: `${value}`,\n      status: \"pending\"\n    };\n    todos.push(newTodo);\n    setTodos([...todos]); // have to use this way [...todos]\n  };\n\n  const updateTodo = (todoItem: TodoType) => {\n    const index = todos.findIndex(todo => todo.id === todoItem.id);\n    todos[index] = todoItem;\n    setTodos([...todos]);\n  };\n\n  const removeTodo = (todoId: string | number) => {\n    const index = todos.findIndex(todo => todo.id === todoId);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <TodoContext.Provider\n      value={{\n        todos,\n        setTodos,\n        addTodo,\n        updateTodo,\n        removeTodo\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoProvider;\n"]},"metadata":{},"sourceType":"module"}
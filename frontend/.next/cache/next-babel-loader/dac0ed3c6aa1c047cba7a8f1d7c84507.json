{"ast":null,"code":"var _jsxFileName = \"/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/components/UiElements/NavLink/NavLink.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Children } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\nconst ActiveLink = (_ref) => {\n  let {\n    children,\n    activeClassName,\n    href\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\", \"href\"]);\n\n  const {\n    pathname\n  } = useRouter();\n  const child = Children.only(children);\n  const childClassName = child.props.className || '';\n  const newpathname = pathname.split('/').slice(1, 2);\n  const path = `/${newpathname[0]}`;\n  const className = path === href ? `${childClassName} ${activeClassName}`.trim() : childClassName;\n  return __jsx(Link, _extends({\n    href: href\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.cloneElement(child, {\n    className: className || null\n  }));\n};\n\nexport default ActiveLink;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/components/UiElements/NavLink/NavLink.tsx"],"names":["React","Children","useRouter","Link","ActiveLink","children","activeClassName","href","props","pathname","child","only","childClassName","className","newpathname","split","slice","path","trim","cloneElement"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAQA,MAAMC,UAAU,GAAG,UAKI;AAAA,MALH;AAClBC,IAAAA,QADkB;AAElBC,IAAAA,eAFkB;AAGlBC,IAAAA;AAHkB,GAKG;AAAA,MADlBC,KACkB;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAeP,SAAS,EAA9B;AACA,QAAMQ,KAAU,GAAGT,QAAQ,CAACU,IAAT,CAAcN,QAAd,CAAnB;AACA,QAAMO,cAAc,GAAGF,KAAK,CAACF,KAAN,CAAYK,SAAZ,IAAyB,EAAhD;AACA,QAAMC,WAAW,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAApB;AACA,QAAMC,IAAI,GAAI,IAAGH,WAAW,CAAC,CAAD,CAAI,EAAhC;AAEA,QAAMD,SAAS,GACbI,IAAI,KAAKV,IAAT,GACK,GAAEK,cAAe,IAAGN,eAAgB,EAArC,CAAuCY,IAAvC,EADJ,GAEIN,cAHN;AAKA,SACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEL;AAAZ,KAAsBC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGR,KAAK,CAACmB,YAAN,CAAmBT,KAAnB,EAA0B;AACzBG,IAAAA,SAAS,EAAEA,SAAS,IAAI;AADC,GAA1B,CADH,CADF;AAOD,CAxBD;;AA0BA,eAAeT,UAAf","sourcesContent":["import React, { Children } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\n\ntype ActiveLinkProps = {\n  children: React.ReactNode;\n  activeClassName: string;\n  href: string;\n};\n\nconst ActiveLink = ({\n  children,\n  activeClassName,\n  href,\n  ...props\n}: ActiveLinkProps) => {\n  const { pathname } = useRouter();\n  const child: any = Children.only(children);\n  const childClassName = child.props.className || '';\n  const newpathname = pathname.split('/').slice(1, 2);\n  const path = `/${newpathname[0]}`;\n\n  const className =\n    path === href\n      ? `${childClassName} ${activeClassName}`.trim()\n      : childClassName;\n\n  return (\n    <Link href={href} {...props}>\n      {React.cloneElement(child, {\n        className: className || null,\n      })}\n    </Link>\n  );\n};\n\nexport default ActiveLink;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/pages/settings/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Head from 'next/head';\nimport dynamic from 'next/dynamic';\nimport { Row, Col } from 'react-flexbox-grid';\nimport { Block } from 'baseui/block';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { useForm } from 'react-hook-form';\nimport Container from '../../components/UiElements/Container/Container';\nimport SettingsMenu from '../../components/SideMenu/SettingsMenu';\nimport { AvatarWrapper, ButtonGroup } from '../../components/PageStyles/Settings.styled';\nconst AvatarWithNoSSR = dynamic(() => import('react-avatar-edit'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-avatar-edit')],\n    modules: ['react-avatar-edit']\n  }\n});\n\nconst Settings = () => {\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm();\n  useEffect(() => {\n    register({\n      name: 'avatar'\n    });\n  }, [register]);\n\n  const handleOnCrop = img => {\n    setValue('avatar', img);\n  };\n\n  const handleBeforeFileLoad = e => {\n    if (e.target.files[0].size > 71680) {\n      alert('File is too big!');\n      e.target.value = '';\n    }\n  };\n\n  const handleOnSubmit = handleSubmit(data => {\n    console.log('Form data: ', data);\n    alert(JSON.stringify(data, null, 4));\n  });\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Settings | INST.\"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst setting page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(Block, {\n    paddingTop: ['15px', '20px', '30px', '40px'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(Col, {\n    lg: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(SettingsMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), __jsx(Col, {\n    lg: 9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Block, {\n    paddingTop: ['10px', '10px', '10px', 0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: handleOnSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(Block, {\n    marginBottom: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(AvatarWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(AvatarWithNoSSR, {\n    label: \"Choose avatar\",\n    labelStyle: {\n      fontSize: '16px',\n      fontWeight: 500,\n      cursor: 'pointer'\n    },\n    width: 150,\n    height: 150,\n    onCrop: handleOnCrop,\n    onBeforeFileLoad: handleBeforeFileLoad,\n    src: require('../../assets/images/avatar.jpg'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))), __jsx(Block, {\n    marginBottom: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    label: \"Your Name\",\n    caption: \"Please use 32 characters at maximum\",\n    error: errors.name && 'This field is required',\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Input, {\n    name: \"name\",\n    autoComplete: \"off\",\n    inputRef: register({\n      required: true,\n      maxLength: 32\n    }),\n    placeholder: \"Please enter your full name or a display name you comfortable with\",\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))), __jsx(Block, {\n    marginBottom: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    label: \"Your User Name\",\n    caption: \"Please use 16 characters at maximum\",\n    error: errors.username && 'This field is required',\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(Input, {\n    name: \"username\",\n    autoComplete: \"off\",\n    placeholder: \"Please enter your user name or a display name you comfortable with\",\n    inputRef: register({\n      required: true,\n      maxLength: 16\n    }),\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }))), __jsx(Block, {\n    marginBottom: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    label: \"Your Email\",\n    caption: \"jennydoe@example.io\",\n    error: errors.email && 'This field is required',\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    autoComplete: \"off\",\n    inputRef: register({\n      required: true,\n      pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n    }),\n    placeholder: \"Please enter your email address\",\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }))), __jsx(ButtonGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(Button, {\n    type: \"submit\",\n    size: \"large\",\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({\n            width: '131px'\n          }, $theme.typography.font250);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Save\"), __jsx(Button, {\n    type: \"reset\",\n    onClick: () => reset(),\n    kind: \"tertiary\",\n    size: \"large\",\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({\n            width: '131px'\n          }, $theme.typography.font250);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Cancel\")))))))));\n};\n\nexport default Settings;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/Inst - React Minimalist GraphQL Dashboard/LTL Maps Admin/frontend/pages/settings/index.tsx"],"names":["React","useEffect","Head","dynamic","Row","Col","Block","FormControl","Input","Button","useForm","Container","SettingsMenu","AvatarWrapper","ButtonGroup","AvatarWithNoSSR","ssr","Settings","register","setValue","handleSubmit","reset","errors","name","handleOnCrop","img","handleBeforeFileLoad","e","target","files","size","alert","value","handleOnSubmit","data","console","log","JSON","stringify","fontSize","fontWeight","cursor","require","Label","style","$theme","typography","font350","required","maxLength","InputContainer","backgroundColor","username","email","pattern","BaseButton","width","font250"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { NextPage } from 'next';\nimport Head from 'next/head';\nimport dynamic from 'next/dynamic';\nimport { Row, Col } from 'react-flexbox-grid';\nimport { Block } from 'baseui/block';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { useForm } from 'react-hook-form';\nimport Container from '../../components/UiElements/Container/Container';\nimport SettingsMenu from '../../components/SideMenu/SettingsMenu';\nimport {\n  AvatarWrapper,\n  ButtonGroup,\n} from '../../components/PageStyles/Settings.styled';\n\nconst AvatarWithNoSSR = dynamic(() => import('react-avatar-edit'), {\n  ssr: false,\n});\n\ntype FormData = {\n  avatar: string;\n  name: string;\n  username: string;\n  email: string;\n};\n\nconst Settings: NextPage<{}> = () => {\n  const { register, setValue, handleSubmit, reset, errors } = useForm<\n    FormData\n  >();\n\n  useEffect(() => {\n    register({ name: 'avatar' });\n  }, [register]);\n\n  const handleOnCrop = (img: string) => {\n    setValue('avatar', img);\n  };\n\n  const handleBeforeFileLoad = (e: any) => {\n    if (e.target.files[0].size > 71680) {\n      alert('File is too big!');\n      e.target.value = '';\n    }\n  };\n\n  const handleOnSubmit = handleSubmit(data => {\n    console.log('Form data: ', data);\n    alert(JSON.stringify(data, null, 4));\n  });\n\n  return (\n    <>\n      <Head>\n        <title>Settings | INST.</title>\n        <meta name=\"Description\" content=\"Inst setting page\" />\n      </Head>\n\n      <Container>\n        <Block paddingTop={['15px', '20px', '30px', '40px']}>\n          <Row>\n            <Col lg={3}>\n              <SettingsMenu />\n            </Col>\n            <Col lg={9}>\n              <Block paddingTop={['10px', '10px', '10px', 0]}>\n                <form onSubmit={handleOnSubmit}>\n                  <Block marginBottom=\"30px\">\n                    <AvatarWrapper>\n                      <AvatarWithNoSSR\n                        label=\"Choose avatar\"\n                        labelStyle={{\n                          fontSize: '16px',\n                          fontWeight: 500,\n                          cursor: 'pointer',\n                        }}\n                        width={150}\n                        height={150}\n                        onCrop={handleOnCrop}\n                        onBeforeFileLoad={handleBeforeFileLoad}\n                        src={require('../../assets/images/avatar.jpg')}\n                      />\n                    </AvatarWrapper>\n                  </Block>\n                  <Block marginBottom=\"30px\">\n                    <FormControl\n                      label=\"Your Name\"\n                      caption=\"Please use 32 characters at maximum\"\n                      error={errors.name && 'This field is required'}\n                      overrides={{\n                        Label: {\n                          style: ({ $theme }) => {\n                            return { ...$theme.typography.font350 };\n                          },\n                        },\n                      }}\n                    >\n                      <Input\n                        name=\"name\"\n                        autoComplete=\"off\"\n                        inputRef={register({ required: true, maxLength: 32 })}\n                        placeholder=\"Please enter your full name or a display name you comfortable with\"\n                        overrides={{\n                          InputContainer: {\n                            style: () => {\n                              return { backgroundColor: 'transparent' };\n                            },\n                          },\n                        }}\n                      />\n                    </FormControl>\n                  </Block>\n\n                  <Block marginBottom=\"30px\">\n                    <FormControl\n                      label=\"Your User Name\"\n                      caption=\"Please use 16 characters at maximum\"\n                      error={errors.username && 'This field is required'}\n                      overrides={{\n                        Label: {\n                          style: ({ $theme }) => {\n                            return { ...$theme.typography.font350 };\n                          },\n                        },\n                      }}\n                    >\n                      <Input\n                        name=\"username\"\n                        autoComplete=\"off\"\n                        placeholder=\"Please enter your user name or a display name you comfortable with\"\n                        inputRef={register({ required: true, maxLength: 16 })}\n                        overrides={{\n                          InputContainer: {\n                            style: () => {\n                              return { backgroundColor: 'transparent' };\n                            },\n                          },\n                        }}\n                      />\n                    </FormControl>\n                  </Block>\n\n                  <Block marginBottom=\"30px\">\n                    <FormControl\n                      label=\"Your Email\"\n                      caption=\"jennydoe@example.io\"\n                      error={errors.email && 'This field is required'}\n                      overrides={{\n                        Label: {\n                          style: ({ $theme }) => {\n                            return { ...$theme.typography.font350 };\n                          },\n                        },\n                      }}\n                    >\n                      <Input\n                        type=\"email\"\n                        name=\"email\"\n                        autoComplete=\"off\"\n                        inputRef={register({\n                          required: true,\n                          pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                        })}\n                        placeholder=\"Please enter your email address\"\n                        overrides={{\n                          InputContainer: {\n                            style: () => {\n                              return { backgroundColor: 'transparent' };\n                            },\n                          },\n                        }}\n                      />\n                    </FormControl>\n                  </Block>\n\n                  <ButtonGroup>\n                    <Button\n                      type=\"submit\"\n                      size=\"large\"\n                      overrides={{\n                        BaseButton: {\n                          style: ({ $theme }) => {\n                            return {\n                              width: '131px',\n                              ...$theme.typography.font250,\n                            };\n                          },\n                        },\n                      }}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      type=\"reset\"\n                      onClick={() => reset()}\n                      kind=\"tertiary\"\n                      size=\"large\"\n                      overrides={{\n                        BaseButton: {\n                          style: ({ $theme }) => {\n                            return {\n                              width: '131px',\n                              ...$theme.typography.font250,\n                            };\n                          },\n                        },\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </form>\n              </Block>\n            </Col>\n          </Row>\n        </Block>\n      </Container>\n    </>\n  );\n};\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}